#!/bin/bash
#Copyright 2005-2024, Lime Technology, Inc.
#License: GPLv2 only

# This is the 'mover' script used for moving files between pools and/or the main unRAID array.
# It is typically invoked via cron.

# The script is set up so that hidden directories (i.e., directory names beginning with a '.'
# character) at the topmost level of a pool or an array disk are not moved.  This behavior
# can be turned off by uncommenting the following line:
# shopt -s dotglob

# Files at the top level of a pool or an array disk are never moved.

# The 'find' command generates a list of all files and directories of a share.
# For each file, if the file is not "in use" by any process (as detected by 'in_use' command),
# then the file is moved, and upon success, deleted from the source disk.  If the file already
# exists on the target, it is not moved and the source is not deleted.  All meta-data of moved
# files/directories is preserved: permissions, ownership, extended attributes, and access/modified
# timestamps.

# If an error occurs in copying a file, the partial file, if present, is deleted and the
# operation continues on to the next file.

PIDFILE="/var/run/mover.pid"
CFGFILE="/boot/config/share.cfg"
DEBUGGING=""

start() {
  if [ -f $PIDFILE ]; then
    if ps h $(cat $PIDFILE) | grep mover ; then
        echo "mover: already running"
        exit 1
    fi
  fi

  if [ -f $CFGFILE ]; then
    # Only start if shfs includes pools
    if ! grep -qs 'shareCacheEnabled="yes"' $CFGFILE ; then
      echo "mover: cache not enabled"
      exit 2
    fi
  fi

  echo $$ >/var/run/mover.pid
  echo "mover: started"

  shopt -s nullglob

  for SHARECFG in /boot/config/shares/*.cfg ; do
    SHARE=$(basename "$SHARECFG" .cfg)
    [[ "$SHARE" == *~* ]] && continue
    source <(fromdos < "$SHARECFG")
    # maybe move from primary to secondary
    if [[ $shareUseCache = yes ]]; then
      find "/mnt/$shareCachePool/$SHARE" -depth 2>/dev/null | /usr/libexec/unraid/move $DEBUGGING
    fi
    # maybe move from secondary to primary
    if [[ $shareUseCache = prefer ]]; then
      if [[ -n $shareCachePool2 ]]; then
        # secondary is a pool
        find "/mnt/$shareCachePool2/$SHARE" -depth 2>/dev/null | /usr/libexec/unraid/move $DEBUGGING
      else
        # secondary is the unRAID array
        for SHAREPATH in /mnt/disk[0-9]*/$SHARE; do
          find "$SHAREPATH" -depth 2>/dev/null | /usr/libexec/unraid/move $DEBUGGING
        done
      fi
    fi
  done

  rm -f $PIDFILE
  echo "mover: finished"
}

killtree() {
  local pid=$1 child
    
  for child in $(pgrep -P $pid); do
    killtree $child
  done
  [ $pid -ne $$ ] && kill -TERM $pid
}

stop() {
  if [ ! -f $PIDFILE ]; then
    echo "mover: not running"
    exit 0
  fi
  killtree $(cat $PIDFILE)
  sleep 2
  rm -f $PIDFILE
  echo "mover: stopped"
}

case $1 in
start)
  start
  ;;
stop)
  stop
  ;;
status)
  [ -f $PIDFILE ]
  ;;
*)
  # Default is "start"
  # echo "Usage: $0 (start|stop|status)"
  start
  ;;
esac
